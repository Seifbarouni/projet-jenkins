/* groovylint-disable-next-line CompileStatic */
pipeline {
    agent any

    environment {
        DOCKER_PASSWORD = credentials('docker-credentials')
        RELEASE_VERSION = '1.0.0'
    }

    stages {
        stage('Download Artifact from Nexus') {
            steps {
                    sh '''
                        curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD -O "http://nexus:8081/repository/nexus/com/seifbarouni/front/$RELEASE_VERSION/front-$RELEASE_VERSION.tar.gz"
                    '''
                    sh '''
                        curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD -O "http://nexus:8081/repository/nexus/com/seifbarouni/back/$RELEASE_VERSION/back-$RELEASE_VERSION.tar.gz"
                    '''
                    // unzip the artifacts
                    sh 'mkdir -p front-$RELEASE_VERSION'
                    sh 'mkdir -p back-$RELEASE_VERSION'
                    sh 'tar -xzvf front-$RELEASE_VERSION.tar.gz -C front-$RELEASE_VERSION'
                    sh 'tar -xzvf back-$RELEASE_VERSION.tar.gz -C back-$RELEASE_VERSION'
            }
        }
        stage('Build Docker Images') {
            steps {
                dir("front-${RELEASE_VERSION}") {
                    sh 'docker build -t seifbarouni/frontend:$RELEASE_VERSION .'
                }
                dir("back-${RELEASE_VERSION}") {
                    sh 'docker build -t seifbarouni/backend:$RELEASE_VERSION .'
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                sh 'echo $DOCKER_PASSWORD | docker login -u seifbarouni --password-stdin'
                sh 'docker push seifbarouni/frontend:$RELEASE_VERSION'
                sh 'docker push seifbarouni/backend:$RELEASE_VERSION'
            }
        }
        // IMPORTANT: create kind cluster and add the kubeconfig to jenkins credentials, the jenkins container must be in the same network as the kind cluster

        stage('Deploy to Kubernetes') {
            steps {
                // deploy to k8s cluster
                dir('dep') {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        sh 'kubectl apply -f k8s.yaml'
                    }
                }
            }
        }
        stage('Send Slack Message') {
            steps {
                slackSend(color: '#FFFF00', message: "Build Docker + K8S Deployment App Version ${RELEASE_VERSION} --> Success")
            }
        }
        stage('Clean Up') {
            steps {
                sh 'rm -rf front-$RELEASE_VERSION'
                sh 'rm -rf back-$RELEASE_VERSION'
                sh 'rm -rf front-$RELEASE_VERSION.tar.gz'
                sh 'rm -rf back-$RELEASE_VERSION.tar.gz'
            }
        }
    }
}
